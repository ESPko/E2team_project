From f41c6e3f3ed5a7116ef35a13bad56efa8e442db8 Mon Sep 17 00:00:00 2001
From: void-alive <sja9284@gmail.com>
Date: Tue, 18 Feb 2025 12:40:18 +0900
Subject: [PATCH] =?UTF-8?q?=EB=8C=93=EA=B8=80=20=EB=B3=B4=EA=B8=B0=20?=
 =?UTF-8?q?=EA=B5=AC=ED=98=84=20=EC=99=84=EB=A3=8C?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../e2teamproject/DTO/ReplyDTO.java           | 29 ++++++++++
 .../controller/ReplyController.java           | 29 +++++++++-
 .../repository/ReplyRepository.java           |  8 ++-
 .../e2teamproject/service/ReplyService.java   | 13 ++++-
 .../service/ReplyServiceImpl.java             | 14 ++++-
 .../templates/board/crewDetailPage.html       | 57 ++++++++++++++-----
 6 files changed, 127 insertions(+), 23 deletions(-)
 create mode 100644 src/main/java/bitc/fullstack503/e2teamproject/DTO/ReplyDTO.java

diff --git a/src/main/java/bitc/fullstack503/e2teamproject/DTO/ReplyDTO.java b/src/main/java/bitc/fullstack503/e2teamproject/DTO/ReplyDTO.java
new file mode 100644
index 0000000..1e6f6ab
--- /dev/null
+++ b/src/main/java/bitc/fullstack503/e2teamproject/DTO/ReplyDTO.java
@@ -0,0 +1,29 @@
+package bitc.fullstack503.e2teamproject.DTO;
+
+import bitc.fullstack503.e2teamproject.entity.ReplyEntity;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@AllArgsConstructor
+@NoArgsConstructor
+public class ReplyDTO {
+  private int replyIdx;
+  private String userId;
+  private String comment;
+  private LocalDateTime createDate;
+
+  public static ReplyDTO fromEntity(ReplyEntity reply) {
+    return new ReplyDTO(
+            reply.getReply_idx(),
+            reply.getUserReply().getId(), // 여기서 UserEntity의 id 값 가져옴
+            reply.getComment(),
+            reply.getCreateDate()
+    );
+  }
+}
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java b/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java
index e249ad8..49fb4f1 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java
@@ -1,11 +1,17 @@
 package bitc.fullstack503.e2teamproject.controller;
 
+import bitc.fullstack503.e2teamproject.DTO.ReplyDTO;
+import bitc.fullstack503.e2teamproject.entity.ReplyEntity;
 import bitc.fullstack503.e2teamproject.service.ReplyService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.*;
 
 import java.nio.file.Path;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
 
 @RestController
 @Controller
@@ -15,12 +21,29 @@ public class ReplyController {
   @Autowired
   private ReplyService replyService;
 
+  //  댓글 보기
+  @ResponseBody
+  @GetMapping("/list/{crewBoardIdx}")
+  public Object replyShow(@PathVariable("crewBoardIdx") int crewBoardIdx){
+//    List<ReplyEntity> replyList = replyService.replyShow(crewBoardIdx);
+//    Map<String, Object> result = new HashMap<>();
+//    result.put("replyList", replyList);
+//    System.out.println(result);
+    List<ReplyDTO> replyList = replyService.replyShow(crewBoardIdx)
+            .stream()
+            .map(ReplyDTO::fromEntity)
+            .collect(Collectors.toList());
+
+    Map<String, Object> result = new HashMap<>();
+    result.put("replyList", replyList);
+    return result;
+  }
+
+  //  댓글 쓰기
   @ResponseBody
   @PostMapping("/write/{crewBoardIdx}/{replyWriteComment}")
   public void replyWrite(@PathVariable("crewBoardIdx") int crewBoardIdx,
                          @PathVariable("replyWriteComment") String replyWriteComment) {
-    System.out.println(crewBoardIdx);
-    System.out.println(replyWriteComment);
-    replyService.writeReply(crewBoardIdx, replyWriteComment);
+    replyService.replyWrite(crewBoardIdx, replyWriteComment);
   }
 }
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java b/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java
index a0fdc5b..6dcb1bd 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java
@@ -7,13 +7,19 @@ import org.springframework.data.jpa.repository.Query;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.bind.annotation.RequestParam;
 
+import java.util.List;
+
 public interface ReplyRepository extends JpaRepository<ReplyEntity, Integer> {
 
+  //  댓글 보기
+  @Query("select r from ReplyEntity r where r.boardReply.board_idx = :crewBoardIdx order by r.reply_idx desc")
+  List<ReplyEntity> replyShow(@RequestParam("crewBoardIdx") int crewBoardIdx);
+
   //  댓글 쓰기
   @Modifying
   @Transactional
   @Query(value = "insert into reply (reply_board_idx, reply_user_idx, comment)" +
           "values (:crewBoardIdx, 2, :replyWriteComment)", nativeQuery = true)
-  void writeReply(@RequestParam("crewBoardIdx") int crewBoardIdx,
+  void replyWrite(@RequestParam("crewBoardIdx") int crewBoardIdx,
                   @RequestParam("replyWriteComment") String replyWriteComment);
 }
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyService.java b/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyService.java
index 124e2bf..cc54e8c 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyService.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyService.java
@@ -1,6 +1,15 @@
 package bitc.fullstack503.e2teamproject.service;
 
+import bitc.fullstack503.e2teamproject.entity.ReplyEntity;
+import org.springframework.web.bind.annotation.RequestParam;
+
+import java.util.List;
+
 public interface ReplyService {
-//  댓글 쓰기
-  void writeReply(int crewBoardIdx, String replyWriteComment);
+  //  댓글 보기
+  List<ReplyEntity> replyShow(int crewBoardIdx);
+
+  //  댓글 쓰기
+  void replyWrite(@RequestParam("crewBoardIdx") int crewBoardIdx,
+                  @RequestParam("replyWriteComment") String replyWriteComment);
 }
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java b/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java
index b71cf27..5f012d0 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java
@@ -1,17 +1,27 @@
 package bitc.fullstack503.e2teamproject.service;
 
+import bitc.fullstack503.e2teamproject.entity.ReplyEntity;
 import bitc.fullstack503.e2teamproject.repository.ReplyRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
+import java.util.List;
+
 @Service
 public class ReplyServiceImpl implements ReplyService {
 
   @Autowired
   private ReplyRepository replyRepository;
 
+  //  댓글 보기
+  @Override
+  public List<ReplyEntity> replyShow(int crewBoardIdx){
+    return replyRepository.replyShow(crewBoardIdx);
+  }
+
+  //  댓글 쓰기
   @Override
-  public void writeReply(int crewBoardIdx, String replyWriteComment){
-    replyRepository.writeReply(crewBoardIdx, replyWriteComment);
+  public void replyWrite(int crewBoardIdx, String replyWriteComment) {
+    replyRepository.replyWrite(crewBoardIdx, replyWriteComment);
   }
 }
diff --git a/src/main/resources/templates/board/crewDetailPage.html b/src/main/resources/templates/board/crewDetailPage.html
index dc2d6f0..6df8365 100644
--- a/src/main/resources/templates/board/crewDetailPage.html
+++ b/src/main/resources/templates/board/crewDetailPage.html
@@ -16,30 +16,57 @@
           const crewBoardIdx = $(".crewBoardIdx").val();
           console.log(crewBoardIdx);
 
+          // 목록 버튼 누르면 목록으로
           $("#btn-list").on("click", function () {
               history.back();
           });
+
+          // 쓰기 버튼 누르면 crew 쓰기로
           $("#btn-write").on("click", function () {
               location.href = "/crew/write";
           });
+
+          // 댓글 보기
+          $.ajax({
+              url: `/reply/list/${crewBoardIdx}`,
+              type: "get",
+              success: function (data) {
+                  let replyShowBox = $(".replyShowBox");
+                  replyShowBox.empty();
+
+                  data.replyList.forEach(reply => {
+                      let html = `<div style='padding: 10px 10px 0 10px;'>`;
+                      html += `<span style='font-weight: bold;' class='replyId'>${reply.userId}</span>`;
+                      html += `<span style='font-size: small' class='replyWriteDate'>${reply.createDate}</span>`;
+                      html += `</div>`
+                      html += `<div class='mt-2 replyContent' style='padding: 0 10px 10px 10px;'>${reply.comment}</div>`;
+
+                      replyShowBox.append(html);
+                  });
+              }
+          });
+
+          // 댓글 쓰기 누르면 댓글 쓰기
           $("#replyWriteButton").on("click", function () {
               const replyWriteComment = $("#replyWriteComment").val();
               console.log(replyWriteComment);
 
               $.ajax({
-                  url: `/reply/write/${crewBoardIdx}/${replyWriteComment}`,
+                  url: `/reply/write/ ${crewBoardIdx}/${replyWriteComment}`,
                   type: 'post',
                   data: {"crewBoardIdx": crewBoardIdx, "replyWriteComment": replyWriteComment},
-                  // success: function () {
-                  //     alert("공지 등록 완료");
-                  //     location.reload();
-                  // },
-                  // error: function () {
-                  //     alert("공지 등록 완료");
-                  // }
+                  success: function () {
+                      alert("댓글 등록 완료");
+                      location.reload();
+                  },
+                  error: function () {
+                      alert("댓글 등록 실패");
+                  }
               });
           });
-      });
+
+      })
+      ;
   </script>
 </head>
 <body>
@@ -98,12 +125,12 @@
       <div>
         <i class="fa-regular fa-comment"></i> 댓글
       </div>
-      <div class="mt-3" style="border: 0.4px solid lightgray; border-radius: 5px;">
-        <div style="padding: 10px 10px 0 10px;">
-          <span style="font-weight: bold;">ID </span>
-          <span style="font-size: small"> 작성일</span>
-        </div>
-        <div class="mt-2" style="padding: 0 10px 10px 10px;">review 내용</div>
+      <div class="mt-3 replyShowBox" style="border: 0.4px solid lightgray; border-radius: 5px;">
+        <!--        <div style="padding: 10px 10px 0 10px;">-->
+        <!--          <span style="font-weight: bold;" class="replyId">ID </span>-->
+        <!--          <span style="font-size: small" class="replyWriteDate"> 작성일</span>-->
+        <!--        </div>-->
+        <!--        <div class="mt-2 replyContent" style="padding: 0 10px 10px 10px;">review 내용</div>-->
       </div>
     </div>
     <div class="d-flex justify-content-between mt-5"
-- 
2.47.0.windows.2

