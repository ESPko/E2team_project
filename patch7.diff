From 444b1860de3d0812eabc52e006cd783b94433307 Mon Sep 17 00:00:00 2001
From: void-alive <sja9284@gmail.com>
Date: Tue, 18 Feb 2025 15:44:19 +0900
Subject: [PATCH] =?UTF-8?q?toast=20ui=20=EC=8B=A4=ED=97=98=EC=9A=A9=20?=
 =?UTF-8?q?=EC=B6=94=EA=B0=80?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../controller/BoardController.java           |  7 ++
 .../controller/BoardImageController.java      | 79 ++++++++++++++++++-
 .../controller/ReplyController.java           | 14 ----
 .../repository/ReplyRepository.java           |  6 --
 .../service/ReplyServiceImpl.java             |  2 -
 .../templates/board/crewDetailPage.html       | 10 ---
 .../templates/board/jiHyunToastTest.html      | 63 +++++++++++++++
 7 files changed, 148 insertions(+), 33 deletions(-)
 create mode 100644 src/main/resources/templates/board/jiHyunToastTest.html

diff --git a/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardController.java b/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardController.java
index 0ed1560..6fb058b 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardController.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardController.java
@@ -37,6 +37,13 @@ public class BoardController {
     return mav;
   }
 
+  //  심지현 tostEditor 테스트용
+  @RequestMapping("/jiHyunToast")
+  public ModelAndView jihyunToast() {
+    ModelAndView mav = new ModelAndView("/board/jiHyunToastTest");
+    return mav;
+  }
+
   // 프로필
   @RequestMapping("/pro")
   public ModelAndView profile() {
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardImageController.java b/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardImageController.java
index 054a0fc..f50573f 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardImageController.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/controller/BoardImageController.java
@@ -2,13 +2,28 @@ package bitc.fullstack503.e2teamproject.controller;
 
 import bitc.fullstack503.e2teamproject.service.BoardImageService;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.http.MediaType;
 import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
 
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.UUID;
+
+import static jakarta.persistence.GenerationType.UUID;
+
+@RestController
 @Controller
 @RequestMapping("/boardImage")
 public class BoardImageController {
 
+  @Value("${file.dir}")
+  private String fileDirection;
+
   @Autowired
   private BoardImageService boardImageService;
 
@@ -16,4 +31,66 @@ public class BoardImageController {
   public String boardImage() {
     return "boardImage";
   }
+
+  //  실험용
+  @ResponseBody
+  @PostMapping("/image-upload")
+  public String uploadEditorImage(@RequestParam final MultipartFile image) {
+    if (image.isEmpty()) {
+      return "";
+    }
+    String orgFilename = image.getOriginalFilename();                                         // 원본 파일명
+    String uuid = java.util.UUID.randomUUID().toString().replaceAll("-", "");          // 32자리 랜덤 문자열
+    String extension = orgFilename.substring(orgFilename.lastIndexOf(".") + 1);  // 확장자
+    String saveFilename = uuid + "." + extension;                                             // 디스크에 저장할 파일명
+    String fileFullPath = Paths.get(fileDirection, saveFilename).toString();
+
+    System.out.println("원본 파일 이름 : " + orgFilename);
+    System.out.println("uuid : " + uuid);
+    System.out.println("저장된 파일이름 : " + saveFilename);
+    System.out.println("파일 경로 : " + fileFullPath);
+
+    File dir = new File(fileDirection);
+    if (!dir.exists()) {
+      dir.mkdirs();
+    }
+
+    try {
+      // 파일 저장 (write to disk)
+      File uploadFile = new File(fileFullPath);
+      image.transferTo(uploadFile);
+      return saveFilename;
+
+    } catch (IOException e) {
+      // 예외 처리는 따로 해주는 게 좋습니다.
+      throw new RuntimeException(e);
+    }
+  }
+
+  /**
+   * 디스크에 업로드된 파일을 byte[]로 반환
+   * @param filename 디스크에 업로드된 파일명
+   * @return image byte array
+   */
+  @ResponseBody
+  @GetMapping(value = "/image-print", produces = { MediaType.IMAGE_GIF_VALUE, MediaType.IMAGE_JPEG_VALUE, MediaType.IMAGE_PNG_VALUE })
+  public byte[] printEditorImage(@RequestParam final String filename) {
+    // 업로드된 파일의 전체 경로
+    String fileFullPath = Paths.get(fileDirection, filename).toString();
+
+    // 파일이 없는 경우 예외 throw
+    File uploadedFile = new File(fileFullPath);
+    if (!uploadedFile.exists()) {
+      throw new RuntimeException();
+    }
+
+    try {
+      // 이미지 파일을 byte[]로 변환 후 반환
+      return Files.readAllBytes(uploadedFile.toPath());
+
+    } catch (IOException e) {
+      // 예외 처리는 따로 해주는 게 좋습니다.
+      throw new RuntimeException(e);
+    }
+  }
 }
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java b/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java
index d4ce53e..4920a25 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/controller/ReplyController.java
@@ -32,13 +32,6 @@ public class ReplyController {
 
     Map<String, Object> result = new HashMap<>();
     result.put("replyList", replyList);
-
-    for (ReplyDTO replyDTO : replyList) {
-      System.out.println(replyDTO.getReplyIdx());
-      System.out.println(replyDTO.getComment());
-      System.out.println(replyDTO.getCreateDate());
-      System.out.println(replyDTO.getUserId());
-    }
     return result;
   }
 
@@ -50,13 +43,6 @@ public class ReplyController {
     replyService.replyWrite(crewBoardIdx, replyWriteComment);
   }
 
-  //  댓글 수정(아이디가 일치하는지?)
-  @ResponseBody
-  @PutMapping("/modify/{replyIdx}")
-  public void replyModify(@PathVariable("replyIdx") int replyIdx){
-//    replyService.replyModify();
-  }
-
   //  댓글 삭제
   @ResponseBody
   @DeleteMapping("/delete/{replyIdx}")
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java b/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java
index 14e643e..8141515 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/repository/ReplyRepository.java
@@ -23,12 +23,6 @@ public interface ReplyRepository extends JpaRepository<ReplyEntity, Integer> {
   void replyWrite(@RequestParam("crewBoardIdx") int crewBoardIdx,
                   @RequestParam("replyWriteComment") String replyWriteComment);
 
-  //  댓글 수정
-  @Modifying
-  @Query("update ReplyEntity r set r.comment= :newReplyComment where r.reply_idx = :replyIdx")
-  void replyModify(@RequestParam("newReplyComment") String newReplyComment,
-                   @RequestParam("replyIdx") int replyIdx);
-
   //  댓글 삭제
   @Modifying
   @Transactional
diff --git a/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java b/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java
index 0fd4f18..18b778d 100644
--- a/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java
+++ b/src/main/java/bitc/fullstack503/e2teamproject/service/ReplyServiceImpl.java
@@ -27,8 +27,6 @@ public class ReplyServiceImpl implements ReplyService {
     replyRepository.replyWrite(crewBoardIdx, replyWriteComment);
   }
 
-//  댓글 수정
-
   //  댓글 삭제
   @Override
   public void replyDelete(int replyIdx) {
diff --git a/src/main/resources/templates/board/crewDetailPage.html b/src/main/resources/templates/board/crewDetailPage.html
index 9c25b93..5093ab4 100644
--- a/src/main/resources/templates/board/crewDetailPage.html
+++ b/src/main/resources/templates/board/crewDetailPage.html
@@ -40,7 +40,6 @@
                       html += `<span style='font-weight: bold;' class='replyId'>${reply.userId}</span>`;
                       html += `<span style='font-size: small' class='replyWriteDate'>${reply.createDate}</span>`;
                       html += `<div class='mt-2 replyContent' style='padding: 0 10px 10px 10px;'>${reply.comment}</div>`;
-                      html += `<button type="button" class="modifyReplyButton">수정</button>`;
                       html += `<button type="button" class="deleteReplyButton">삭제</button>`;
                       html += `</div>`
 
@@ -68,15 +67,6 @@
               });
           });
 
-          // 댓글 수정
-          $(document).on("click", ".modifyReplyButton", function () {
-              console.log("댓글 수정 버튼");
-              let replyIdx = $(this).closest("div div").find(".replyIdx").val();
-              let replyUserId = $(this).closest("div div").find(".replyId").text();
-              console.log(`글 번호 : ${replyIdx}`);
-              console.log(`글쓴이 : ${replyUserId}`);
-          });
-
           // 댓글 삭제
           $(document).on("click", ".deleteReplyButton", function () {
               let replyIdx = $(this).closest("div div").find(".replyIdx").val();
diff --git a/src/main/resources/templates/board/jiHyunToastTest.html b/src/main/resources/templates/board/jiHyunToastTest.html
new file mode 100644
index 0000000..9b0dcd2
--- /dev/null
+++ b/src/main/resources/templates/board/jiHyunToastTest.html
@@ -0,0 +1,63 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+  <meta charset="UTF-8">
+  <title>jiHyunToastTest</title>
+  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
+        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
+  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
+          integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
+          crossorigin="anonymous"></script>
+  <script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4="
+          crossorigin="anonymous"></script>
+  <link rel="stylesheet" href="https://uicdn.toast.com/editor/latest/toastui-editor.min.css"/>
+
+</head>
+<body>
+<div id="content">
+</div>
+<script src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>
+<script>
+    const editor = new toastui.Editor({
+        el: document.querySelector('#content'), // 에디터를 적용할 요소 (컨테이너)
+        height: '500px',                        // 에디터 영역의 높이 값 (OOOpx || auto)
+        initialEditType: 'markdown',            // 최초로 보여줄 에디터 타입 (markdown || wysiwyg)
+        initialValue: '내용을 입력해 주세요.',     // 내용의 초기 값으로, 반드시 마크다운 문자열 형태여야 함
+        previewStyle: 'vertical',
+
+        /* start of hooks */
+        hooks: {
+            async addImageBlobHook(blob, callback) { // 이미지 업로드 로직 커스텀
+                try {
+                    /*
+                     * 1. 에디터에 업로드한 이미지를 FormData 객체에 저장
+                     *    (이때, 컨트롤러 uploadEditorImage 메서드의 파라미터인 'image'와 formData에 append 하는 key('image')값은 동일해야 함)
+                     */
+                    const formData = new FormData();
+                    formData.append('image', blob);
+
+                    // 2. FileApiController - uploadEditorImage 메서드 호출
+                    const response = await fetch('/boardImage/image-upload', {
+                        method : 'POST',
+                        body : formData,
+                    });
+
+                    // 3. 컨트롤러에서 전달받은 디스크에 저장된 파일명
+                    const filename = await response.text();
+                    console.log('서버에 저장된 파일명 : ', filename);
+
+                    // 4. addImageBlobHook의 callback 함수를 통해, 디스크에 저장된 이미지를 에디터에 렌더링
+                    const imageUrl = `/boardImage/image-print?filename=${filename}`;
+                    callback(imageUrl, 'image alt attribute');
+
+                } catch (error) {
+                    console.error('업로드 실패 : ', error);
+                }
+            }
+        }
+        /* end of hooks */
+    });
+</script>
+
+</body>
+</html>
\ No newline at end of file
-- 
2.47.0.windows.2

